
import os

import unittest

import pandas as pd

import numpy

from interop import imaging

from checkQC.parsers.interop_parser import InteropParser


class TestInteropParser(unittest.TestCase):

    class Receiver(object):
        def __init__(self):
            self.error_rate_values = []
            self.percent_q30_values = []
            self.percent_q30_per_cycle = []
            self.subscriber = self.subscribe()
            next(self.subscriber)

        def subscribe(self):
            while True:
                interop_stat = yield
                key = list(interop_stat)[0]
                if key == "error_rate":
                    self.error_rate_values.append(interop_stat)
                if key == "percent_q30":
                    self.percent_q30_values.append(interop_stat)
                if key == "percent_q30_per_cycle":
                    self.percent_q30_per_cycle.append(interop_stat)

        def send(self, value):
            self.subscriber.send(value)

    runfolder = os.path.join(os.path.dirname(__file__), "..", 
                             "resources",
                             "MiSeqDemo")
    interop_parser = InteropParser(runfolder=runfolder, 
                                   parser_configurations=None)
    subscriber = Receiver()
    interop_parser.add_subscribers(subscriber)
    interop_parser.run()

    def test_read_error_rate(self):
        self.assertListEqual(self.subscriber.error_rate_values,
                             [('error_rate', 
                                {'lane': 1, 
                                 'read': 1, 
                                 'error_rate': 1.5317546129226685}),
                              ('error_rate',
                                {'lane': 1,
                                 'read': 2,
                                 'error_rate': 1.9201501607894897})])


    def test_percent_q30(self):
        self.assertListEqual(self.subscriber.percent_q30_values,
                             [('percent_q30', 
                               {'lane': 1, 
                                'read': 1, 
                                'percent_q30': 93.42070007324219, 
                                'is_index_read': False}),
                              ('percent_q30', 
                               {'lane': 1, 
                                'read': 2, 
                                'percent_q30': 84.4270248413086, 
                                'is_index_read': False})])
        
    # def test_percent_q30_per_cycle_r1(self):
    #      expected_values = [98.76343, 98.718155, 98.529205, 98.43606, 98.41527, 98.35158, 98.37026, 98.38132, 98.36106, 98.335, 98.41815, 98.34947, 98.39447, 98.34131, 98.4179, 98.39527, 98.39079, 98.341324, 98.37368, 98.27342, 98.148155, 98.03079, 98.08657, 98.005005, 98.03605, 97.94395, 98.06053, 97.95342, 98.01316, 98.0458, 98.01947, 98.009735, 98.02342, 97.90763, 97.99262, 97.978424, 97.91369, 97.84553, 97.97316, 97.86104, 97.93341, 97.86342, 97.841576, 97.64315, 97.54816, 97.47948, 97.47237, 97.377106, 97.447105, 97.27185, 97.403946, 97.34501, 97.41447, 97.38974, 97.433426, 97.40026, 97.42869, 97.29763, 97.43052, 97.39132, 97.34763, 97.17079, 97.25579, 97.31422, 97.286575, 97.22263, 97.27711, 97.16738, 97.14105, 96.94316, 97.13577, 96.94395, 97.11817, 96.86737, 97.01237, 96.95684, 96.95264, 97.04738, 97.03184, 97.04105, 96.98684, 96.835, 96.93789, 96.85237, 96.81421, 96.86896, 96.80868, 96.90315, 96.664215, 96.81447, 96.70737, 96.735794, 96.7679, 96.728165, 96.73658, 96.64632, 96.46658, 96.48131, 96.41448, 96.574745, 96.51894, 96.31079, 96.31421, 96.45342, 96.29737, 96.19973, 96.188416, 96.289734, 96.29763, 96.32, 94.81028, 95.52737, 96.005005, 95.86289, 96.17553, 96.218414, 96.27237, 96.23263, 96.3079, 96.18527, 96.22947, 96.21816, 96.259476, 96.14763, 92.26922, 95.46, 95.90264, 95.898415, 94.49395, 95.76396, 95.94606, 95.11658, 95.752106, 95.557106, 95.562355, 95.71289, 95.80552, 95.55026, 93.14158, 95.316055, 95.50447, 95.607635, 95.561844, 95.45895, 95.56026, 94.96788, 95.34317, 95.46264, 95.459465, 95.525536, 95.56736, 95.652885, 95.606316, 95.58342, 95.43131, 95.49342, 95.39658, 95.44184, 95.22317, 95.295265, 95.095535, 95.14896, 94.780525, 94.87027, 94.70605, 94.64394, 94.80764, 94.50131, 94.69448, 94.68158, 94.497375, 94.515785, 94.417366, 94.45975, 94.27211, 94.198685, 94.20026, 94.221565, 93.94553, 93.85895, 93.96526, 94.10264, 93.86763, 93.65447, 93.83105, 93.61816, 93.38394, 93.1437, 93.223946, 91.49342, 92.098946, 92.40526, 92.94052, 87.92157, 90.16184, 90.41526, 91.70974, 92.38053, 92.53263, 92.225266, 92.427635, 92.50421, 92.27869, 92.33895, 92.20184, 92.12736, 92.165794, 92.10736, 92.01763, 91.983955, 91.90525, 91.874214, 91.66367, 91.71869, 91.6671, 91.53262, 91.34948, 91.16526, 91.13737, 90.939735, 91.092384, 90.33316, 90.63632, 90.73973, 90.55527, 90.494995, 90.55237, 90.24158, 90.32605, 90.22631, 89.959465, 89.8784, 89.793945, 89.76474, 89.503426, 89.3421, 89.11763, 89.16948, 88.73395, 88.74973, 88.48079, 88.43711, 88.530525, 88.37474, 88.42394, 88.42105, 88.267105, 88.14474, 87.89184, 87.78474, 87.58157, 87.51632, 87.162094, 87.12895, 86.8392, 86.82895, 86.626854, 86.60184, 86.52368, 86.15026, 86.00895, 86.002625, 85.73631, 85.706055, 85.48342, 85.522896]
    #      expected_list = list(map(self.as_float, expected_values))
    #      self.assertListEqual(self.subscriber.percent_q30_per_cycle,
    #                           [('percent_q30_per_cycle', 
    #                             {'lane': 1, 
    #                              'read': 1, 
    #                              'percent_q30_per_cycle': expected_list, 
    #                              'is_index_read': False})])
        
    # def test_percent_q30_per_cycle_r2(self):
    #     self.assertListEqual(self.subscriber.percent_q30_per_cycle,
    #                          [('percent_q30_per_cycle', 
    #                            {'lane': 1, 
    #                             'read': 2, 
    #                             'percent_q30_per_cycle': [95.20342, 95.16185, 95.1863, 95.170265, 95.203415, 95.21843, 95.27683, 95.26711, 95.22132, 95.35527, 95.32395, 95.30816, 95.320786, 95.13632, 95.163155, 95.19579, 95.12079, 95.09973, 94.0679, 94.97895, 94.98633, 95.07105, 95.145, 95.09499, 95.098946, 94.90711, 95.02474, 95.0, 95.025, 95.04948, 95.03974, 95.0771, 95.01473, 94.98526, 94.996315, 95.0029, 95.04974, 95.003685, 95.07894, 94.98317, 94.98421, 94.79, 94.90026, 94.873955, 94.85027, 94.78448, 94.7971, 94.7679, 94.68052, 94.73683, 94.73869, 94.73946, 94.6442, 94.57448, 94.66605, 94.58527, 94.12632, 94.470535, 94.26341, 94.280785, 94.345795, 93.54104, 94.1479, 94.29315, 94.26132, 94.29973, 94.184204, 94.20526, 94.27, 94.162636, 94.18895, 94.18422, 94.099464, 94.06368, 93.94764, 93.838684, 93.98341, 93.94395, 93.91238, 93.80894, 93.85606, 93.84789, 93.91, 93.823685, 93.859474, 93.743675, 93.76737, 93.65316, 93.75921, 93.63869, 93.40158, 93.462906, 93.45474, 93.37921, 93.10394, 93.20184, 93.05973, 92.87052, 93.03921, 92.621056, 92.93027, 93.00027, 93.01631, 92.90501, 92.913414, 92.98078, 92.860535, 92.82578, 92.54973, 92.84658, 92.765785, 92.80552, 92.80553, 92.88922, 92.67527, 92.71262, 92.79605, 92.91737, 92.7442, 92.62921, 92.77421, 92.75053, 92.586044, 92.66026, 92.5058, 92.43474, 92.23999, 92.084206, 92.165794, 92.2129, 92.24368, 92.213684, 92.25291, 92.07868, 91.970795, 92.05682, 91.94264, 91.83236, 91.79289, 91.827896, 91.62421, 91.46474, 91.57948, 89.09658, 90.12026, 90.84816, 90.96869, 91.10263, 90.96763, 91.088425, 90.85606, 90.90025, 90.65078, 90.61763, 90.52395, 90.37473, 90.329216, 90.19474, 90.19447, 90.122635, 90.10816, 89.93896, 89.759995, 89.792114, 89.676575, 89.53236, 89.4121, 89.48209, 89.39079, 89.19921, 88.7679, 89.023155, 88.92104, 89.01237, 88.68895, 88.73948, 88.60342, 88.40631, 88.0642, 88.17869, 88.00447, 87.980255, 87.78, 87.74895, 87.40341, 87.328674, 87.278946, 87.17237, 87.09789, 86.93525, 86.656845, 86.61606, 86.44842, 86.24947, 86.090515, 86.072365, 85.85422, 85.81816, 85.54027, 85.612366, 85.3679, 85.121315, 84.96552, 84.792625, 84.51894, 84.18474, 84.08395, 83.95052, 83.76157, 83.42079, 83.260796, 83.01658, 82.87078, 82.68711, 82.29868, 82.00869, 81.96079, 81.45843, 81.207375, 80.90316, 80.75053, 80.497635, 79.859215, 79.28025, 79.16685, 78.918945, 78.57159, 78.289474, 78.203674, 77.89342, 77.598946, 77.09841, 77.01184, 76.68105, 76.517105, 76.051315, 75.56605, 75.295, 74.86473, 74.64579, 74.09158, 73.68289, 73.48212, 73.09475, 69.588684, 68.71553, 69.6721, 70.78684, 69.506584, 69.116844, 67.87816, 67.40921, 67.396835, 67.61025, 67.024216, 66.58738, 65.98212, 65.24343, 64.43105, 63.750534, 59.648426, 59.842106, 60.35448, 61.38657, 61.0029, 60.440525], 
    #                             'is_index_read': False})])
    
    def test_get_percent_q30_per_cycle(self):
        runfolder = os.path.join(os.path.dirname(__file__), "..", 
                             "resources", 
                             "MiSeqDemo")
 
        q_metrics = imaging(runfolder,
              valid_to_load=['Q'])
        
        get_q30_call_as_var = InteropParser.get_percent_q30_per_cycle(
                q_metrics=q_metrics,
                lane_nr=0, 
                read_nr=0,
                is_index_read=False)  
        
        expected_values = [98.76343, 98.718155, 98.529205, 98.43606, 98.41527, 98.35158, 98.37026, 98.38132, 98.36106, 98.335, 98.41815, 98.34947, 98.39447, 98.34131, 98.4179, 98.39527, 98.39079, 98.341324, 98.37368, 98.27342, 98.148155, 98.03079, 98.08657, 98.005005, 98.03605, 97.94395, 98.06053, 97.95342, 98.01316, 98.0458, 98.01947, 98.009735, 98.02342, 97.90763, 97.99262, 97.978424, 97.91369, 97.84553, 97.97316, 97.86104, 97.93341, 97.86342, 97.841576, 97.64315, 97.54816, 97.47948, 97.47237, 97.377106, 97.447105, 97.27185, 97.403946, 97.34501, 97.41447, 97.38974, 97.433426, 97.40026, 97.42869, 97.29763, 97.43052, 97.39132, 97.34763, 97.17079, 97.25579, 97.31422, 97.286575, 97.22263, 97.27711, 97.16738, 97.14105, 96.94316, 97.13577, 96.94395, 97.11817, 96.86737, 97.01237, 96.95684, 96.95264, 97.04738, 97.03184, 97.04105, 96.98684, 96.835, 96.93789, 96.85237, 96.81421, 96.86896, 96.80868, 96.90315, 96.664215, 96.81447, 96.70737, 96.735794, 96.7679, 96.728165, 96.73658, 96.64632, 96.46658, 96.48131, 96.41448, 96.574745, 96.51894, 96.31079, 96.31421, 96.45342, 96.29737, 96.19973, 96.188416, 96.289734, 96.29763, 96.32, 94.81028, 95.52737, 96.005005, 95.86289, 96.17553, 96.218414, 96.27237, 96.23263, 96.3079, 96.18527, 96.22947, 96.21816, 96.259476, 96.14763, 92.26922, 95.46, 95.90264, 95.898415, 94.49395, 95.76396, 95.94606, 95.11658, 95.752106, 95.557106, 95.562355, 95.71289, 95.80552, 95.55026, 93.14158, 95.316055, 95.50447, 95.607635, 95.561844, 95.45895, 95.56026, 94.96788, 95.34317, 95.46264, 95.459465, 95.525536, 95.56736, 95.652885, 95.606316, 95.58342, 95.43131, 95.49342, 95.39658, 95.44184, 95.22317, 95.295265, 95.095535, 95.14896, 94.780525, 94.87027, 94.70605, 94.64394, 94.80764, 94.50131, 94.69448, 94.68158, 94.497375, 94.515785, 94.417366, 94.45975, 94.27211, 94.198685, 94.20026, 94.221565, 93.94553, 93.85895, 93.96526, 94.10264, 93.86763, 93.65447, 93.83105, 93.61816, 93.38394, 93.1437, 93.223946, 91.49342, 92.098946, 92.40526, 92.94052, 87.92157, 90.16184, 90.41526, 91.70974, 92.38053, 92.53263, 92.225266, 92.427635, 92.50421, 92.27869, 92.33895, 92.20184, 92.12736, 92.165794, 92.10736, 92.01763, 91.983955, 91.90525, 91.874214, 91.66367, 91.71869, 91.6671, 91.53262, 91.34948, 91.16526, 91.13737, 90.939735, 91.092384, 90.33316, 90.63632, 90.73973, 90.55527, 90.494995, 90.55237, 90.24158, 90.32605, 90.22631, 89.959465, 89.8784, 89.793945, 89.76474, 89.503426, 89.3421, 89.11763, 89.16948, 88.73395, 88.74973, 88.48079, 88.43711, 88.530525, 88.37474, 88.42394, 88.42105, 88.267105, 88.14474, 87.89184, 87.78474, 87.58157, 87.51632, 87.162094, 87.12895, 86.8392, 86.82895, 86.626854, 86.60184, 86.52368, 86.15026, 86.00895, 86.002625, 85.73631, 85.706055, 85.48342, 85.522896]
        
        returned_list = list(map(self.as_float, get_q30_call_as_var))
        expected_list = list(map(self.as_float, expected_values))

        self.assertTrue(returned_list == expected_list)

    def as_float(self, x):
        '''
        Helper function to be able to compare numpy float with
        regular float.
        '''
        return round(float(x),3)
        
